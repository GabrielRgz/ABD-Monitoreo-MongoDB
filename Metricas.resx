<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWzYkDlg/MFlXQDGbVz8yzFdA
        MetXQDH7V0Ax+1dAMetXPzLMV0Axm1c+MFpbNiQOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUj4wJVc/MJ1XPzH2WEAy/1hA
        Mv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1c/MfVXPzCdUj4wJQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVTgcCVc/MYxXPzH6WEAy/1hA
        Mv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9XPzH6Vz8xjFU4
        HAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFU/MSRYQDHTWEAy/1hA
        Mv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hA
        Mv9YQDL/WEAx01U/MSQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABTPi4xWD8y6lhA
        Mv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hA
        Mv9YQDL/WEAy/1hAMv9YQDL/WD8y6lM+LjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVT8xJFg/
        MupYQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hA
        Mv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WD8y6lU/MSQAAAAAAAAAAAAAAAAAAAAAAAAAAFU4
        HAlYQDHTWEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WUEz/1lBM/9ZQTP/WEAy/1hBMv9YQTL/WEEy/1hB
        Mv9XQDL/V0Az/1dAM/9XQDP/V0Ay/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAx01U4HAkAAAAAAAAAAAAA
        AAAAAAAAVz8xjFhAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/6iblP/FvLf/vLKt/8O7tv+rn5j/vrFA/6GR
        PP+hkTz/vrFA/zhijv8vban/Mmqh/y5tqv85YYv/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/Vz8xjAAA
        AAAAAAAAAAAAAFI+MCVXPzH6WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/qJuU/21YTP9YQDL/alVI/6uf
        mP+ikjz/WEAy/1hAMv+ikjz/OGKO/1BHRv9YQDL/T0hJ/zlhi/9YQDL/WEAy/1hAMv9YQDL/WEAy/1hA
        Mv9XPzH6WT4wJQAAAAAAAAAAVz8wnVhAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv+om5T/bVhM/1hA
        Mv9qVUj/q5+Y/6KSPP9YQDL/WEAy/6KSPP84Yo7/UEdG/1hAMv9PSEn/OWGL/1hAMv9YQDL/WEAy/1hA
        Mv9YQDL/WEAy/1hAMv9XPzCdAAAAAFs2JA5XPzH1WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/6ib
        lP9tWEz/WEAy/2pVSP+rn5j/opI8/1hAMv9YQDL/opI8/zhijv9QR0b/WEAy/09ISf85YYv/WEAy/1hA
        Mv9YQDL/WEAy/1hAMv9YQDL/WEAy/1c/MfZbNiQOVT8wWVhAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hA
        Mv9YQDL/qJuU/21YTP9YQDL/alVI/6ufmP+ikjz/WEAy/1hAMv+ikjz/OGKO/1BHRv9YQDL/T0hJ/zlh
        i/9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1c+MFpXQDGbWEAy/1hAMv9YQDL/WEAy/1hA
        Mv9YQDL/WEAy/1hAMv+Me3L/vrWv/720rv++ta//jn50/6KSPP9YQDL/WEAy/6KSPP84Yo7/UEdG/1hA
        Mv9PSEn/OWGL/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/V0Axm1c/MsxYQDL/WEAy/1hA
        Mv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/opI8/1hAMv9YQDL/opI8/zhi
        jv9QR0b/WEAy/09ISf85YYv/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9XPzLMV0Ax61hA
        Mv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/2BJM/+XhTr/WEAy/1hAMv+ikjz/WEAy/1hA
        Mv+ikjz/OGKO/1BHRv9YQDL/T0hJ/zlhi/9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1c/
        MexXQDH7WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/35qN/+ZiTv/WEAy/7Ch
        Pv99aTf/fWk3/7ChPv84Yo7/UEdG/1hAMv9PSEn/OWGL/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hA
        Mv9YQDL/V0Ax+1dAMftYQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/35q
        N/+ZiTv/fGg3/31pN/99aTf/fGg3/zhijv9QR0b/WEAy/09ISf85YYv/WEAy/1hAMv9YQDL/WEAy/1hA
        Mv9YQDL/WEAy/1hAMv9XQDH7V0Ax61hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hA
        Mv9YQDL/WEAy/35qN/+ZiDv/WEAy/1hAMv9YQDL/OGKO/1BHRv9YQDL/T0hJ/zlhi/9YQDL/WEAy/1hA
        Mv9YQDL/WEAy/1hAMv9YQDL/WEAy/1dAMetXQDDLWEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hA
        Mv9YQDL/WEAy/1hAMv9YQDL/WEAy/35qN/+ZiDv/WEAy/1hAMv84Yo7/UEdG/1hAMv9PSEn/OWGL/1hA
        Mv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/Vz8yzFdAMZtYQDL/WEAy/1hAMv9YQDL/WEAy/1hA
        Mv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/35qN/+ZiDv/WEAy/zhijv87X4T/QFp3/ztf
        hv85YYv/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9XQDGbVT8wWVhAMv9YQDL/WEAy/1hA
        Mv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/35qN/+ZiDv/UEhH/0lQ
        Xf9JUF3/SVBd/1BHRv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1g/MFlbNiQOVz8x9VhA
        Mv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/35q
        N/+ZiDv/WEAy/1hAMv+Gczj/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9XPzH1WzYkDgAA
        AABXPzCdWEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hA
        Mv9YQDL/WEAy/35qN/+ZiDv/WEAy/6KSPP9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1c/
        MJ0AAAAAAAAAAFI+MCVXPzH6WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hA
        Mv9YQDL/WEAy/1hAMv9YQDL/WEAy/35qN/+ZiDv/opI8/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hA
        Mv9XPzH6Uj4wJQAAAAAAAAAAAAAAAFhAMYtYQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hA
        Mv9YQDL/WEAy/1hAMv9YQDL/WEAy/1lBMv+fjjv/oZE8/76xQP+jkzz/WEAy/1hAMv9YQDL/WEAy/1hA
        Mv9YQDL/WEAy/1c/MYwAAAAAAAAAAAAAAAAAAAAAVTgcCVdAMdNYQDL/WEAy/1hAMv9YQDL/WEAy/1hA
        Mv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQTL/WEEy/1hAMv9YQDL/WEAy/1hA
        Mv9YQDL/WEAy/1hAMv9XQDHTVTgcCQAAAAAAAAAAAAAAAAAAAAAAAAAAVT8xJFc/MepYQDL/WEAy/1hA
        Mv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hA
        Mv9YQDL/WEAy/1hAMv9YQDL/Vz8y6lU/MSQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVT8vMFc/
        MepYQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hA
        Mv9YQDL/WEAy/1hAMv9YQDL/WEAy/1c/MupVPy8wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAVT8xJFdAMdNYQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hA
        Mv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9XQDHTVT8xJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAVTgcCVc/MYxXPzH6WEAy/1hAMv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hA
        Mv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9XPzH6Vz8xjFU4HAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFI+MCVXPzCdVz8x9VhAMv9YQDL/WEAy/1hA
        Mv9YQDL/WEAy/1hAMv9YQDL/WEAy/1hAMv9XPzH1Vz8wnVI+MCUAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABbNiQOVT8wWVdA
        MZtXPzLMV0Ax61dAMftXQDH7V0Ax61dAMstXQDGbVT8wWVs2JA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/8AD//8AAP/8AAA/+AAAH/AAAA/gAAAHwAAAA8AAAAOAAAABgAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAABwAAAA8AA
        AAPgAAAH8AAAD/gAAB/8AAA//wAA///AA/8=
</value>
  </data>
</root>